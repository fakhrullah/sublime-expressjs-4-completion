{
    "scope": "source.js",
    "completions": [
        {
            "trigger": "applocals[variables]",
            "contents": "app.locals.${0:variable}"
        },
        {
            "trigger": "appall(path, callback [,callback ...])",
            "contents": "app.all(${1:path}, ${0:callback})"
        },
        {
            "trigger": "appdelete(path, callback [, callback ...])",
            "contents": "app.delete(${1:path}, ${2:callback})"
        },
        {
            "trigger": "appdisable(name)",
            "contents": "app.disable(${0:name})"
        },
        {
            "trigger": "appdisabled(name)",
            "contents": "app.disabled(${0:name})"
        },
        {
            "trigger": "appenable(name)",
            "contents": "app.enable(${0:name})"
        },
        {
            "trigger": "appenabled(name)",
            "contents": "app.enabled(${0:name})"
        },
        {
            "trigger": "appengine(ext, callback)",
            "contents": "app.engine(${1:ext}, ${2:callback})"
        },
        {
            "trigger": "appget(name)",
            "contents": "app.get(${0:name})"
        },
        {
            "trigger": "appget(path, callback [, callback ...])",
            "contents": "app.get(${1:path}, ${2:callback})"
        },
        {
            "trigger": "applisten(port, [hostname], [backlog], [callback])",
            "contents": "app.listen(${1:port}${2:[, hostname]}${3:[, backlog]}${4:[, callback]})"
        },
        {
            "trigger": "appparam([name], callback)",
            "contents": "app.param(${1:namesArray}, ${2:callback})"
        },
        {
            "trigger": "apppath()",
            "contents": "app.path()"
        },
        {
            "trigger": "apppost(path, callback [, callback ...])",
            "contents": "app.post(${1:path}, ${2:callback})"
        },
        {
            "trigger": "appput(path, callback [, callback ...])",
            "contents": "app.put(${1:path}, ${2:callback})"
        },
        {
            "trigger": "apprender(view, [locals], callback)",
            "contents": "app.render(${1:view}${2:[, locals]}, ${3:callback})"
        },
        {
            "trigger": "approute(path)",
            "contents": "app.route(${1:path})"
        },
        {
            "trigger": "appset(name, value)",
            "contents": "app.set(${1:name}, ${2:value})"
        },
        {
            "trigger": "appuse([path,] function [, function...])",
            "contents": "app.use(${1:[path,] ${2:function})"
        },
        {
            "trigger": "appcheckout()",
            "contents": "app.checkout()"
        },
        {
            "trigger": "appcopy()",
            "contents": "app.copy()"
        },
        {
            "trigger": "apphead()",
            "contents": "app.head()"
        },
        {
            "trigger": "applock()",
            "contents": "app.lock()"
        },
        {
            "trigger": "appmerge()",
            "contents": "app.merge()"
        },
        {
            "trigger": "appmkactivity()",
            "contents": "app.mkactivity()"
        },
        {
            "trigger": "appmkcool()",
            "contents": "app.mkcool()"
        },
        {
            "trigger": "appmove()",
            "contents": "app.move()"
        },
        {
            "trigger": "appm-search",
            "contents": "app['m-search']"
        },
        {
            "trigger": "appnotify()",
            "contents": "app.notify()"
        },
        {
            "trigger": "appoptions()",
            "contents": "app.options()"
        },
        {
            "trigger": "apppatch()",
            "contents": "app.patch()"
        },
        {
            "trigger": "apppurge()",
            "contents": "app.purge()"
        },
        {
            "trigger": "appreport()",
            "contents": "app.report()"
        },
        {
            "trigger": "appsearch()",
            "contents": "app.search()"
        },
        {
            "trigger": "appsubscribe()",
            "contents": "app.subscribe()"
        },
        {
            "trigger": "apptrace()",
            "contents": "app.trace()"
        },
        {
            "trigger": "appunlock()",
            "contents": "app.unlock()"
        },
        {
            "trigger": "app.unsubscribe()",
            "contents": "app.unsubscribe()"
        }
    ]
}